{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["marked","require","App","props","state","text","placeholder","textChange","bind","event","this","setState","target","value","className","id","onChange","dangerouslySetInnerHTML","__html","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAAe,I,YCIXA,EAASC,EAAQ,IAGfC,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,KAAMC,GAEV,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBALA,E,8CAOlB,SAAWC,GACTC,KAAKC,SAAU,CACbN,KAAMI,EAAMG,OAAOC,U,oBAKvB,WAGA,OACE,gCACE,sBAAKC,UAAY,YAAjB,UACE,oBAAIA,UAAY,cAAhB,4BACR,0BAAUC,GAAK,SAASD,UAAY,eAAeE,SAAYN,KAAKH,WAAYM,MAASH,KAAKN,MAAMC,UAGpG,sBAAKS,UAAY,YAAjB,UACA,oBAAIA,UAAY,cAAhB,6BACA,qBAAKC,GAAK,UAAUE,wBAA2B,CAACC,OAAQlB,EAAOU,KAAKN,MAAMC,mB,GA3BxDc,IAAMC,WAmClBd,EAAW,ypCA6CFJ,IC3EAmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0fc4385a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\n\nlet marked = require(\"marked\");\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      text: placeholder\n    }\n  this.textChange = this.textChange.bind(this)}\n  \n  textChange(event){\n    this.setState( {\n      text: event.target.value\n    }\n    )\n  }\n  \n  render(){\n\n\n  return (\n    <div>\n      <div className = \"container\">\n        <h3 className = \"text-center\">Input Markdown</h3>\n<textarea id = \"editor\" className = \"form-control\" onChange = {this.textChange} value = {this.state.text}>\n</textarea>\n</div>\n<div className = \"container\">\n<h3 className = \"text-center\">Markdown Output</h3>\n<div id = \"preview\" dangerouslySetInnerHTML = {{__html: marked(this.state.text)}}>\n</div>\n</div>\n</div>\n  );\n}\n}\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}